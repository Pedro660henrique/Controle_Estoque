package model.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.dao.BaseDao;
import model.entities.Fornecedor;

public class FornecedorDaoJDBC implements BaseDao<Fornecedor> {
	
	private Connection conn;
	
	public FornecedorDaoJDBC(Connection conn) {
		this.conn = conn;
	}
	

	@Override
    public void insert(Fornecedor obj) {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("INSERT INTO fornecedor ( nomeFornecedor, endereco, cidade, bairro, cep, uf, tel, cnpj)"
            		+ " VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
            		+ Statement.RETURN_GENERATED_KEYS);
            
            st.setString(1, obj.getNomeFornecedor());
            st.setString(2, obj.getEnderecoFornecedor());
            st.setString(3, obj.getCidade());
            st.setString(4, obj.getBairro());
            st.setString(5, obj.getCep());
            st.setString(6, obj.getUf());
            st.setInt(7, obj.getTelefone());
            st.setString(8, obj.getCnpj());
            
            int rowsAffected = st.executeUpdate();
            if (rowsAffected > 0) {
                ResultSet rs = st.getGeneratedKeys();
                if (rs.next()) {
                    obj.setIdFornecedor(rs.getInt(1));
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao inserir fornecedor: " + e.getMessage(), e);
        } finally {
            try {
                if (st != null) st.close();
            } catch (SQLException e) {
                throw new RuntimeException("Erro ao fechar recurso: " + e.getMessage(), e);
            }
        }
    }

    @Override
    public void update(Fornecedor obj) {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("UPDATE fornecedor SET nomeFornecedor = ?, endereco = ?, cidade = ?, bairro = ?, cep = ?, uf = ?, tel = ?, cnpj = ? WHERE idFornecedor = ?");
            
            st.setString(1, obj.getNomeFornecedor());
            st.setString(2, obj.getEnderecoFornecedor());
            st.setString(3, obj.getCidade());
            st.setString(4, obj.getBairro());
            st.setString(5, obj.getCep());
            st.setString(6, obj.getUf());
            st.setInt(7, obj.getTelefone());
            st.setString(8, obj.getCnpj());
            
            st.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao atualizar fornecedor: " + e.getMessage(), e);
        } finally {
            try {
                if (st != null) st.close();
            } catch (SQLException e) {
                throw new RuntimeException("Erro ao fechar recurso: " + e.getMessage(), e);
            }
        }
    }

    @Override
    public void deleteById(Integer id) {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("DELETE FROM fornecedor WHERE idFornecedor = ?");
            st.setInt(1, id);
            st.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao excluir fornecedor: " + e.getMessage(), e);
        } finally {
            try {
                if (st != null) st.close();
            } catch (SQLException e) {
                throw new RuntimeException("Erro ao fechar recurso: " + e.getMessage(), e);
            }
        }
    }

    @Override
    public Fornecedor findById(Integer id) {
        PreparedStatement st = null;
        ResultSet rs = null;
        try {
            st = conn.prepareStatement("SELECT * FROM fornecedor WHERE idFornecedor = ?");
            st.setInt(1, id);
            rs = st.executeQuery();
            if (rs.next()) {
                Fornecedor fornecedor = new Fornecedor();
                fornecedor.setIdFornecedor(rs.getInt("idFornecedor"));
                fornecedor.setNomeFornecedor(rs.getString("nomeFornecedor"));
                fornecedor.setEnderecoFornecedor(rs.getString("endereco"));
                fornecedor.setCidade(rs.getString("cidade"));
                fornecedor.setBairro(rs.getString("bairro"));
                fornecedor.setCep(rs.getString("cep"));
                fornecedor.setUf(rs.getString("uf"));
                fornecedor.setTelefone(rs.getInt("tel"));
                fornecedor.setCnpj(rs.getString("cnpj"));
                return fornecedor;
            }
            return null;
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao buscar fornecedor por ID: " + e.getMessage(), e);
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
            } catch (SQLException e) {
                throw new RuntimeException("Erro ao fechar recursos: " + e.getMessage(), e);
            }
        }
    }

    @Override
    public List<Fornecedor> findAll() {
        PreparedStatement st = null;
        ResultSet rs = null;
        List<Fornecedor> fornecedores = new ArrayList<>();
        try {
            st = conn.prepareStatement("SELECT * FROM fornecedor");
            rs = st.executeQuery();
            while (rs.next()) {
                Fornecedor fornecedor = new Fornecedor();
                fornecedor.setIdFornecedor(rs.getInt("idFornecedor"));
                fornecedor.setNomeFornecedor(rs.getString("nomeFornecedor"));
                fornecedor.setEnderecoFornecedor(rs.getString("endereco"));
                fornecedor.setCidade(rs.getString("cidade"));
                fornecedor.setBairro(rs.getString("bairro"));
                fornecedor.setCep(rs.getString("cep"));
                fornecedor.setUf(rs.getString("uf"));
                fornecedor.setTelefone(rs.getInt("tel"));
                fornecedor.setCnpj(rs.getString("cnpj"));
                fornecedores.add(fornecedor);
            }
            return fornecedores;
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao buscar fornecedores: " + e.getMessage(), e);
        } finally {
            try {
                if (rs != null) rs.close();
                if (st != null) st.close();
            } catch (SQLException e) {
                throw new RuntimeException("Erro ao fechar recursos: " + e.getMessage(), e);
            }
        }
    }